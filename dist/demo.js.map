{"version":3,"sources":["../src/demo.js"],"names":["SqlDataService","_name","OracleDataService","MyCollection","size","dataService","_size","_dataService","_maxSize","value","register","asType","Map","Set","withConstructor","ctor","param","asValue","asDependency","withProperties","props","property","inSingletonScope","resolvedInstance","resolve","anotherResolvedInstance","console","log","inject","dataservice","collection"],"mappings":";;;;AAAA;;;;IAEMA,c,GACF,0BAAc;AAAA;;AACV,SAAKC,KAAL,GAAa,KAAb;AACH,C;;IAGCC,iB,GACF,6BAAc;AAAA;;AACV,SAAKD,KAAL,GAAa,QAAb;AACH,C;;IAGCE,Y;AACF,0BAAYC,IAAZ,EAAkBC,WAAlB,EAA+B;AAAA;;AAC3B,aAAKC,KAAL,GAAaF,IAAb;AACA,aAAKG,YAAL,GAAoBF,WAApB;AACH;;;;4BACa;AACV,mBAAO,KAAKG,QAAZ;AACH,S;0BACWC,K,EAAO;AACf,iBAAKD,QAAL,GAAgBC,KAAhB;AACH;;;;;;AAGL,gCAAGC,QAAH,CAAY,aAAZ,EAA2BC,MAA3B,CAAkCX,cAAlC;AACA,gCAAGU,QAAH,CAAY,aAAZ,EAA2BC,MAA3B,CAAkCX,cAAlC,EAAkD,KAAlD;AACA,gCAAGU,QAAH,CAAY,aAAZ,EAA2BC,MAA3B,CAAkCT,iBAAlC,EAAqD,QAArD;;AAEA,gCAAGQ,QAAH,CAAY,YAAZ,EAA0BC,MAA1B,CAAiCC,GAAjC;AACA,gCAAGF,QAAH,CAAY,YAAZ,EAA0BC,MAA1B,CAAiCE,GAAjC,EAAsC,KAAtC;AACA,gCAAGH,QAAH,CAAY,YAAZ,EACKC,MADL,CACYR,YADZ,EAC0B,IAD1B,EAEKW,eAFL,CAEqB,gBAAQ;AACrBC,SAAKC,KAAL,CAAW,MAAX,EAAmBC,OAAnB,CAA2B,CAA3B;AACAF,SAAKC,KAAL,CAAW,aAAX,EAA0BE,YAA1B,CAAuC,aAAvC;AACH,CALL,EAMKC,cANL,CAMoB,iBAAS;AACrBC,UAAMC,QAAN,CAAe,SAAf,EAA0BJ,OAA1B,CAAkC,EAAlC;AACH,CARL,EASKK,gBATL;;AAWA,IAAMC,mBAAmB,gCAAGC,OAAH,CAAW,YAAX,EAAyB,IAAzB,CAAzB;AACA,IAAMC,0BAA0B,gCAAGD,OAAH,CAAW,YAAX,EAAyB,IAAzB,CAAhC;AACAE,QAAQC,GAAR,CAAYJ,gBAAZ;AACAG,QAAQC,GAAR,qBAA6BJ,qBAAqBE,uBAAlD;;AAEA,gCAAGG,MAAH,CAAU,UAAUC,WAAV,EAAuBC,UAAvB,EAAmC;AACzCJ,YAAQC,GAAR,oBAA6BE,WAA7B;AACAH,YAAQC,GAAR,kBAA2BG,UAA3B;AACH,CAHD","file":"demo.js","sourcesContent":["import { DependencyContainer as DI } from './dependency';\r\n\r\nclass SqlDataService {\r\n    constructor() {\r\n        this._name = 'Sql';\r\n    }\r\n}\r\n\r\nclass OracleDataService {\r\n    constructor() {\r\n        this._name = 'Oracle';\r\n    }\r\n}\r\n\r\nclass MyCollection {\r\n    constructor(size, dataService) {\r\n        this._size = size;\r\n        this._dataService = dataService;\r\n    }\r\n    get maxSize() {\r\n        return this._maxSize;\r\n    }\r\n    set maxSize(value) {\r\n        this._maxSize = value;\r\n    }\r\n}\r\n\r\nDI.register('dataservice').asType(SqlDataService);\r\nDI.register('dataservice').asType(SqlDataService, 'sql');\r\nDI.register('dataservice').asType(OracleDataService, 'oracle');\r\n\r\nDI.register('collection').asType(Map);\r\nDI.register('collection').asType(Set, 'set');\r\nDI.register('collection')\r\n    .asType(MyCollection, 'my')\r\n    .withConstructor(ctor => {\r\n        ctor.param('size').asValue(5);\r\n        ctor.param('dataService').asDependency('dataservice');\r\n    })\r\n    .withProperties(props => {\r\n        props.property('maxSize').asValue(55);\r\n    })\r\n    .inSingletonScope();\r\n\r\nconst resolvedInstance = DI.resolve('collection', 'my');\r\nconst anotherResolvedInstance = DI.resolve('collection', 'my');\r\nconsole.log(resolvedInstance);\r\nconsole.log(`Is Singleton: ${resolvedInstance === anotherResolvedInstance}`);\r\n\r\nDI.inject(function (dataservice, collection) {\r\n    console.log(`Data service: ${dataservice}`);\r\n    console.log(`Collection: ${collection}`);\r\n})"]}