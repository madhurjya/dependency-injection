{"version":3,"sources":["../src/dependency.js"],"names":["_registrations","Map","DependencyContainer","registrationName","has","name","set","DependencyMapping","get","mappingName","Error","dependencyMapping","_mappings","dependencyDetails","_resolve","func","isFunction","TypeError","funcArguments","getFunctionParameters","map","resolve","param","type","DependencyDetails","_type","_resolveWithConstructor","_constructorParameterMapper","_resolvePropertyValues","_propertyValueMapper","_isInSingletonScope","_resolvedInstance","parameterMapperFunc","ParameterMapper","propertyValueMapperFunc","PropertyMapper","constructorArguments","forEach","value","parameterNames","_parameterMap","ParameterDetails","values","_propertyMap","entries","prop","parameterName","_name","_resolveAsValue","_valueToResolve","_resolveAsDependency","_registrationNameToResolve","_mappingNameToResolve","valueToResolve","paramExtract","toString","match","length","split","replace","trim"],"mappings":"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","file":"dependency.js","sourcesContent":["const _registrations = new Map();\r\n\r\nclass DependencyContainer {\r\n    static isRegistered(registrationName) {\r\n        return _registrations.has(registrationName);\r\n    }\r\n    static register(name) {\r\n        if (!_registrations.has(name)) {\r\n            _registrations.set(name, new DependencyMapping());\r\n        }\r\n        return _registrations.get(name);\r\n    }\r\n    static resolve(registrationName, mappingName) {\r\n        if (!_registrations.has(registrationName)) {\r\n            throw new Error(`${registrationName} is not registered.`);\r\n        }\r\n        const dependencyMapping = _registrations.get(registrationName);\r\n        if (!dependencyMapping._mappings.has(mappingName)) {\r\n            throw new Error(`Mapping ${mappingName} is not registered.`);\r\n        }\r\n        const dependencyDetails = dependencyMapping._mappings.get(mappingName);\r\n        return dependencyDetails._resolve();\r\n    }\r\n    static inject(func) {\r\n        if (!isFunction(func)) {\r\n            throw new TypeError('Must be a function of class');\r\n        }\r\n        const funcArguments = getFunctionParameters(func)\r\n            .map(param => {\r\n                return DependencyContainer.resolve(param);\r\n            });\r\n        return func(...funcArguments);\r\n    }\r\n}\r\n\r\nclass DependencyMapping {\r\n    constructor() {\r\n        this._mappings = new Map();\r\n    }\r\n    asType(type, mappingName) {\r\n        if (this._mappings.has(mappingName)) {\r\n            throw new Error(`${mappingName || 'default'} mapping is already registered.`);\r\n        }\r\n        const dependencyDetails = new DependencyDetails(type);\r\n        this._mappings.set(mappingName, dependencyDetails);\r\n        return dependencyDetails;\r\n    }\r\n}\r\n\r\nclass DependencyDetails {\r\n    constructor(type) {\r\n        this._type = type;\r\n        this._resolveWithConstructor = false;\r\n        this._constructorParameterMapper = null;\r\n        this._resolvePropertyValues = false;\r\n        this._propertyValueMapper = false;\r\n        this._isInSingletonScope = false;\r\n        this._resolvedInstance = null;\r\n    }\r\n    withConstructor(parameterMapperFunc) {\r\n        if (this._resolveWithConstructor === true) {\r\n            throw new Error('Constructor is already configured.');\r\n        }\r\n        this._resolveWithConstructor = true;\r\n        this._constructorParameterMapper = new ParameterMapper(getFunctionParameters(this._type));\r\n        if (isFunction(parameterMapperFunc)) {\r\n            parameterMapperFunc(this._constructorParameterMapper);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    withProperties(propertyValueMapperFunc) {\r\n        if (this._resolvePropertyValues === true) {\r\n            throw new Error('Property values are already configured.');\r\n        }\r\n        this._resolvePropertyValues = true;\r\n        this._propertyValueMapper = new PropertyMapper();\r\n        if (isFunction(propertyValueMapperFunc)) {\r\n            propertyValueMapperFunc(this._propertyValueMapper);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    inSingletonScope() {\r\n        this._isInSingletonScope = true;\r\n    }\r\n\r\n    _resolve() {\r\n        if (this._isInSingletonScope && this._resolvedInstance) {\r\n            return this._resolvedInstance;\r\n        } else {\r\n            if (this._resolveWithConstructor === true) {\r\n                const constructorArguments = this._constructorParameterMapper._resolve();\r\n                this._resolvedInstance = new this._type(...constructorArguments);\r\n            } else {\r\n                this._resolvedInstance = new this._type();\r\n            }\r\n            if (this._resolvePropertyValues === true) {\r\n                this._propertyValueMapper._resolve()\r\n                    .forEach(([name, value]) => {\r\n                        this._resolvedInstance[name] = value;\r\n                    });\r\n            }\r\n            return this._resolvedInstance;\r\n        }\r\n    }\r\n}\r\n\r\nclass ParameterMapper {\r\n    constructor(parameterNames) {\r\n        this._parameterMap = new Map(\r\n            parameterNames\r\n                .map(param => [param, new ParameterDetails(param)])\r\n        );\r\n    }\r\n    param(name) {\r\n        if (!this._parameterMap.has(name)) {\r\n            throw new Error(`Parameter \"${name}\" was not detected.`);\r\n        }\r\n        return this._parameterMap.get(name);\r\n    }\r\n\r\n    _resolve() {\r\n        return [...this._parameterMap.values()].map(param => param._resolve());\r\n    }\r\n}\r\n\r\nclass PropertyMapper {\r\n    constructor() {\r\n        this._propertyMap = new Map();\r\n    }\r\n    property(name) {\r\n        if (!this._propertyMap.has(name)) {\r\n            this._propertyMap.set(name, new ParameterDetails(name));\r\n        }\r\n        return this._propertyMap.get(name);\r\n    }\r\n    _resolve() {\r\n        return [...this._propertyMap.entries()]\r\n            .map(([name, prop]) => [name, prop._resolve()]);\r\n    }\r\n}\r\n\r\nclass ParameterDetails {\r\n    constructor(parameterName) {\r\n        this._name = parameterName;\r\n\r\n        this._resolveAsValue = false;\r\n        this._valueToResolve = null;\r\n\r\n        this._resolveAsDependency = false;\r\n        this._registrationNameToResolve = null;\r\n        this._mappingNameToResolve = null;\r\n    }\r\n    asValue(valueToResolve) {\r\n        this._resolveAsValue = true;\r\n        this._valueToResolve = valueToResolve;\r\n    }\r\n    asDependency(registrationName, mappingName) {\r\n        this._resolveAsDependency = true;\r\n        this._registrationNameToResolve = registrationName;\r\n        this._mappingNameToResolve = mappingName;\r\n    }\r\n\r\n    _resolve() {\r\n        if (this._resolveAsValue) {\r\n            return this._valueToResolve;\r\n        } else if (this._resolveAsDependency) {\r\n            return DependencyContainer.resolve(this._registrationNameToResolve,\r\n                this._mappingNameToResolve);\r\n        }\r\n    }\r\n}\r\n\r\nfunction isFunction(func) {\r\n    return typeof func === 'function';\r\n}\r\n\r\nfunction getFunctionParameters(func) {\r\n    const paramExtract = func.toString()\r\n        .match(/\\s*function[^\\(]*\\(([^\\)]*)\\)/);\r\n    if (paramExtract && paramExtract.length === 2) {\r\n        return paramExtract[1]\r\n            .split(',')\r\n            .map(param => param.replace(/\\/\\/.*?[\\r\\n]|\\/\\*(?:.|[\\r\\n])*?\\*\\//g, '').trim())\r\n    } else {\r\n        throw new Error('Unable to fetch parameter details.');\r\n    }\r\n}\r\n\r\nexport { DependencyContainer };"]}